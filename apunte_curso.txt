
leer el zen de python, RECOMENDADO ESPECIAL

los principios del zen, estos los sacamos activando la consola de python e ingresamos lo siguiente: 
import this

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!


Peps: Index of Python Enhancement proposals = 칈ndice de propuestas de mejora de Python
enlace de los peps: https://www.python.org/dev/peps/
son los documentos que conforman la gu칤a de estos estilos del lenguaje, es decir, son los que nos dicen a nosotros
como el lenguaje funciona y como deber칤amos escribirlo de manera correcta

Leer muy bien el pep n칰mero 8
https://www.python.org/dev/peps/pep-0008/

Crear un entorno virtual:

para crear un entorno virtual desde la consola es con el siguiente comando: py -m venv environment
para activar el entorno es con el siguiente comando: .\environment\Scripts\activate
- ahora voy a crear un alias para no est치r a cada rato escribiendo la activaci칩n del entorno, entonces el alias
se escribe de la siguiente manera: alias acti=.\environment\Scripts\activate
tener en cuenta que environment es el nombre de mi entorno virtual, por si creo un entorno con otro nombre hay que
pasarle ese.
- para salir del entorno es de la siguiente manera, solo escribo lo siguiente y ya: deactivate  	

IMPORTANTE:

Compartir archivo con las mismas versiones de programas instalados en mi m치quina para que otra persona instale las
mismas en su m치quina, y no se le dificulte correr nuestro proyecto,  entonces hago as칤: 
pip freeze > requirements.txt
ya con ese comando queda creado el archivo y para instalar exactamente las dependencias o programas que hay en ese
archivo lo hacemos ejecutando este comando y listo: pip install -r requirements.txt
con eso quedan los programas instalados en esa m치quina

hay otros manejadores de paquetes o dependencias dentro de python tambi칠n tenemos a pyenv y pipenv

Alternativa Anaconda:

es un software completo para los cientificos de datos, es una distribuci칩n especial de python que nos permite crear entornos virtuales e instalar dependencias pero
de manera gr츠fica, es decir como una tienda, sin embargo, solo va servir para ciencia de datos porque est치 creada explic칤tamente para eso.

- Como instalarla:
la encontramos en: https://www.anaconda.com/products/individual
no activar los checks porque si no se va romper todo el python que tengamos instalado en el pc, por lo tanto cuando sale la pantalla de los dos checks lo dejamos as칤,
desmarcados

- con "code ." desde el cmd abro una el visual studio para hacer c칩digo.


- Listas y diccionarios:

se pueden colocar listas dentro de diccionarios y diccionarios dentro de listas, revisar apuntes dentro del archivo list_and_dict.py a cerca de como se manejan las 
listas y los diccionarios, recordar que para los diccionarios cuando usamos un for podemos usar metodos directos que nos facilitan obtener datos, por ejemplo tenemos a:
.keys(), .items(), .value()

List comprehension:

Muy importante esta nueva estructura de for que hizo y es as칤:
squares = [for i in range(1, 101) if i % 3 != 0]
print("*******nueva*********",squares)
Estudiar esto minuciosamente, este for se lee asi:
para cada i en el rango que va de 1 a 101 voy a guardar esa i elevada al cuadrado solamente si la i modulo 3 es distinto de cero, es decir, 
para cada i de los numeros del 1 al 100 voy a guardar ese numero al cuadrado si solamente si no es divisible por 3 	

su estructura es la siguiente: [element for element in iterable if condition], ahora voy a definir cada dato en su mismo orden:
element: representa a cada uno de los elementos a poner en la nueva lista
for element in iterable: ciclo a partir de cual se extraer치n elementos de otra lista o cualquier iterable
if condition: condicionn opcional para filtrar los elementos del ciclo
en otras palabras se entiende asi:
en mi nueva lista yo voy a guardar para cada elemento en el iterable ese elemento solo si se cumple la condici칩n

Dictionary comprehension:

la estructura es muy parecida a la de las list comprehensions:
{key:value for value in iterable if condition}, voy a definir cada parte del for
key:value = representa cada una de las llaves y valores a poner en el nuevo diccionario 
for value in iterable = ciclo apartir del cual se extraer涌쪄n elementos de cualquier iterable
if condition = condicion opcional para filtrar los elementos del ciclo 

el ejemplo es el siguiente:
my_dict = {i: i**3 for i in range(1,101) if i % 3 != 0}
print(my_dict)
- para cada i en el rango del 1 al 101 yo voy a guardar a i como llave y a i elevado al cubo(3) como valor solamente
si i % 3 es distinto de cero(0), es decir,
- para cada numero del 1 al 100 voy a guardar ese numero como llave y ese numero elevado al cubo como valor si ese
numero no es divisible entre 3

la explicacion de este for es la siguiente: 
para cada elemento en un iterable yo voy a colocar una lleve y un valor solamente si se cumple una 
condicion

Funciones anonimas: lamba

un ejemplo de la estructura es la siguiente: 
palin = 涌쪏ambda string: string == string[::-1]
print(palin('ana'))

identificador = palin
argumento = lambda string
expresion = string == string[::-1]

la palabra lambda en la funci涌쪒n anterior es el que retorna el objeto de tipo funcion

cuando creamos una funnction lambda es una funcion anonima, pero el nombre que va tener esta funcion con el que la vamos a llamar despues va ser el nombre de la variable
que va guardar el objeto de tipo funcion que esta expresion retorna

por ejemplo una funcion lambda es asi:
palindromo = lambda string: string == string[::-1]
print(palindromo('ana'))

la explicacion de la funcion es la siguiente: tenemos una funcion que recibe un string como parametro y lo que hace es retornar, el resultado de la siguiente
expresion string == string[::-1]

la funcion lamba es esta misma funcion:

def palindromo(string):
    return string == string[::-1]
print(palindromo('ana'))


Funciones de orden superior: High order functions

lo que hace es que una funci칩n recibe omo parametro a otra funci칩 y hace algo con ella, ahora hay tres funciones de orden superior que son
muy importantes en una gran cantidad de lenguajes de programaci칩n, son cl치sicos y son los siguientes: filter, map, reduce

ejemplo aplicaci칩n list comprehension:
my_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
squares = [i**2 for i in my_list]
print(squares)
print(my_list)
la explicaci칩n ser칤a la siguiente: para cada i en mi lista voy a colocar esa i elevada al cuadrado, ese es el
resultado que me deber칤a arrojar la lista comprehension que es los numeros de la lista elevados al cuadrado
 
ahora ejemplo de aplicaci칩n de la funci칩n map con list comprehension:

my_list = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
result = list(map(lambda x: x**2, my_list))
print(result)
explicaci칩n de la funci칩n: tengo la funci칩n lambda como primer par치metro de map, tengo la lista como segundo
par치metro y despu칠s envuelvo a todo esto en la funci칩n list y lo guardo dentro de result

funci칩n reduce:

ejemplo de un forr normal y luego con la funci칩n reduce.

my_list = [2,2,2,2,2]
all_multipled = 2
for i in my_list:
    all_multipled = all_multipled * i
print(all_multipled)

