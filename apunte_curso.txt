
leer el zen de python, RECOMENDADO ESPECIAL

los principios del zen, estos los sacamos activando la consola de python e ingresamos lo siguiente: 
import this

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!


Peps: Index of Python Enhancement proposals = Índice de propuestas de mejora de Python
enlace de los peps: https://www.python.org/dev/peps/
son los documentos que conforman la guía de estos estilos del lenguaje, es decir, son los que nos dicen a nosotros
como el lenguaje funciona y como deberíamos escribirlo de manera correcta

Leer muy bien el pep número 8
https://www.python.org/dev/peps/pep-0008/

Crear un entorno virtual:

para crear un entorno virtual desde la consola es con el siguiente comando: py -m venv environment
para activar el entorno es con el siguiente comando: .\environment\Scripts\activate
- ahora voy a crear un alias para no estár a cada rato escribiendo la activación del entorno, entonces el alias
se escribe de la siguiente manera: alias acti=.\environment\Scripts\activate
tener en cuenta que environment es el nombre de mi entorno virtual, por si creo un entorno con otro nombre hay que
pasarle ese.
- para salir del entorno es de la siguiente manera, solo escribo lo siguiente y ya: deactivate  	

IMPORTANTE:

Compartir archivo con las mismas versiones de programas instalados en mi máquina para que otra persona instale las
mismas en su máquina, y no se le dificulte correr nuestro proyecto,  entonces hago así: 
pip freeze > requirements.txt
ya con ese comando queda creado el archivo y para instalar exactamente las dependencias o programas que hay en ese
archivo lo hacemos ejecutando este comando y listo: pip install -r requirements.txt
con eso quedan los programas instalados en esa máquina

hay otros manejadores de paquetes o dependencias dentro de python también tenemos a pyenv y pipenv

Alternativa Anaconda:

es un software completo para los cientificos de datos, es una distribución especial de python que nos permite crear entornos virtuales e instalar dependencias pero
de manera gŕafica, es decir como una tienda, sin embargo, solo va servir para ciencia de datos porque está creada explicítamente para eso.

- Como instalarla:
la encontramos en: https://www.anaconda.com/products/individual
no activar los checks porque si no se va romper todo el python que tengamos instalado en el pc, por lo tanto cuando sale la pantalla de los dos checks lo dejamos así,
desmarcados

